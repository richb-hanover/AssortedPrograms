====== USB Storage Devices ======

Many LEDE devices have ports to connect storage devices (USB sticks, USB disks) for external storage.
This article provides a "works every time" procedure to configure your modern LEDE device 
to use USB storage devices for storage or for sharing.

At the end of this process, you will have your USB drive formatted for use with LEDE.
The storage will be at _WHERE IN THE FILESYSTEM WILL IT BE SAVED???_

_Note:_ To ensure that this procedure works every time, **the router must have a USB port 
and at least 64 MBytes of Flash and at least 32 MBytes RAM**.
(Virtually every router made since 2016 that runs LEDE will qualify.)
It may be possible to install external storage on less capable routers, but you should look elsewhere on the wiki.

To configure external USB device, follow the procedures of this page:
  - Install the required packages
  - Connect your USB device and get its information
  - Create a partition on the USB device
  - Create a file system on the USB device
  - Automount the partition

===== Install required packages =====

The base LEDE installation needs additional packages to support USB drives. Copy/paste these commands into a SSH session:

<code>
opkg update
opkg install usbutils block-mount fdisk e2fsprogs kmod-fs-ext4 f2fs-tools kmod-fs-f2fs
</code>

===== Verify that the OS recognizes the attached USB drive =====
This optional verification step can be used, to check that the OS can properly detect a connected external drive.

  - Connect your USB disk/stick to the router
  - Run in a command line:<code>ls -l /dev/sd*</code>
  - This should now show a list of block devices known to the OS
  <code>
  brw-------    1 root     root        8,   0 Oct 30 12:49 /dev/sda
  brw-------    1 root     root        8,   1 Oct 30 12:49 /dev/sda1
  </code>
  This should print at least a connected disk like "/dev/sda" or "/dev/sdb". 
  If no disk at all is listed, recheck USB driver installation and reboot your LEDE device once.
  - Install the **block** tool to get more info about existing partitions<code>opkg install block-mount</code>
  - Run the **block** tool:<code>block info | grep "/dev/sd"</code>and you should see output like this, if your disk already has partitions:<code>/dev/sda1: UUID="2eb39413-83a4-4bae-b148-34fb03a94e89" VERSION="1.0" TYPE="ext4"</code>

If a disk already has existing partitions, they get listed as **/dev/sda1**, **/dev/sda2** ,**/dev/sda3** and so on.\\
If we had connected more than one storage device we would have also a **/dev/sdb1** (first partition of second device), **/dev/sdc1** (first partition of third device) and so on.

===== Create a partition on the USB disk =====
if the previous chapter did not list any existing partitions (like "/dev/sda1", "/dev/sda2", "/dev/sdb1"...), you have to create a partition first for further storage usage. 

  - To do so, install **fdisk**:<code>opkg install fdisk</code>
  - Start **fdisk** with the disk name identified in the previous chapter: <code>fdisk /dev/sda</code>
  - In the interactive fdisk menu, create a partition with fdisk command <code>n</code>This triggers an interactive dialogue: Use the suggested defaults for the partition creation (number, starting sector, size etc.)
  - When done, confirm the changes with fdisk interactive command <code>w</code>This will also exit fdisk.
  - Keep a note of the created partition name for the next step

Refer to the fdisk-help screen (menu option "m") in case you need additional help. Stick to a single partition, to stay aligned to the following HowTo.

===== Install file system drivers and create a file system in the partition =====
To use a partition for data storage, it needs to be formatted with a file system.

The following is the most simplest (and recommended) default configuration for LEDE file system usage.\\
For advanced users, there are [[docs:user-guide:advancedfilesystem|further optional file system options available]].

<WRAP center round important 80%>
**WARNING: This step deletes existing data in that partition. Ensure you have a backup of important files before starting!**
</WRAP>
  * For USB hard disks, install EXT4 file system and use EXT4 to format the partition (in this example '/dev/sda1'):<code>opkg install e2fsprogs
opkg install kmod-fs-ext4
mkfs.ext4 /dev/sda1</code>
  * For SSD drives and thumb drives,  install F2FS file system and use F2FS to format the partition (in this example '/dev/sda1'): <code>opkg install f2fs-tools
opkg install kmod-fs-f2fs
mkfs.f2fs /dev/sda1</code>


===== Automount the partition =====
Automount ensures that the external disk partition is automatically made available for usage when booting the LEDE device

  - Generate a config entry for the fstab file:<code>block detect > /etc/config/fstab</code>
  - Now enable automount on that config entry:<code>uci set fstab.@mount[0].enabled='1'
uci commit</code>
  - Optionally enable autocheck of the file system each time the LEDE device powers up:<code>uci set fstab.@global[0].check_fs='1'
uci commit</code>
  - Reboot your LEDE device (to verify that automount works)
  - After the reboot, run <code>uci show fstab</code>to see something like this<code>fstab.@global[0]=global
fstab.@global[0].anon_swap='0'
fstab.@global[0].anon_mount='0'
fstab.@global[0].auto_swap='1'
fstab.@global[0].auto_mount='1'
fstab.@global[0].check_fs='0'
fstab.@global[0].delay_root='5'
fstab.@mount[0]=mount
fstab.@mount[0].target='/mnt/sda1'
fstab.@mount[0].uuid='49c35b1f-a503-45b1-a953-56707bb84968'
fstab.@mount[0].enabled='0'</code>
  - Note the "target" entry. This is the file path, where your attached USB storage drive can be accessed from now on:<code>ls -l /mnt/sda1</code>
  - Your external storage is now ready for further usage
  
  
===== Troubleshooting =====

If you have questions, you can read the information below, or ask questions on the [[https://forum.lede-project.org|LEDE Forum.]]
===== Optional: Extroot configuration =====

If you want to expand your firmware's space (to install more packages) please read the article about [[docs:user-guide:extroot_configuration|Extroot configuration]].



===== Optional: Idle spindown timeout on disks for NAS usage =====
Optional step for hard disks.

If you want to use LEDE as a permanent NAS, you might want to spin down the harddisk motor during times of inactivity. Either because you want to have it quiet in your room during nighttime or to increase lifetime of the harddisk (e.g. when using a home-edition harddisk (instead of a 24x7-datacenter edition).

There are different options, to automatically spin down the motor of the attached harddisk after a certain time of inactivity. Both require installing optional packages on LEDE.

1. Preferred option: hdparm\\
This tool permanently saves a spindown timer on the harddisk itself, using standardized SATA disk commands (the harddisk will then remember that spindown-timer value, even if turned off, even after a restart and even if attached to a different device). 
Its actually just a command line interface for a built-in harddisk function.
So no LEDE service has to be run in the background for this and 'hdparm' could even be uninstalled after setting this parameter. Unfortunately many older USB2.0-PATA/SATA-adapters do not support the required SATA command, although even decade-old harddisks do support it. But fortunately most USB3.0-SATA-cases seem to support the required SATA command.
To install the package
<code>
opkg update && opkg install hdparm
</code>
E.g. to set a reasonable idle timeout of 20 minutes on the harddisk, use:
<code>
hdparm -S 240 /dev/sda2
</code>
  * if the command failed with an error message, your USB-SATA-casing sadly does not support it and you won't be able to use 'hdparm' for disk spindown as long as you use this USB-casing.
  * for all details of allowed codes see https://linux.die.net/man/8/hdparm at "-S" parameter
    * 0 means "idle timeout disabled"
    * 1 to 240 specify multiples of 5 seconds, for timeouts from 5 seconds to 20 minutes.   
    * 241 to 251 specify from 1 to 11 units of 30 minutes, for timeouts from 30 minutes to 5.5 hours.
Of course you can always change the timeout or disable auto-spindown again later on. You should just understand that the value gets save on the harddisk and that the harddisk itself will from then on manage the spindown, not a LEDE service.


2. Option: hd-idle\\
if for any reason your USB-SATA-bridge does not support "hdparm", you can try [[http://hd-idle.sourceforge.net|hd-idle]] as alternative.
This is a service than runs in the background of the LEDE device and maintains its own idletimeout counter. Once the defined timeout counter reaches 0, it will send a "live" spindow SATA command to the disk. Unlike the permanent spindown command from hdparm, a lot more USB2.0-SATA cases seem to support this "spindown-now" SATA command.
To install the package
<code>
opkg update && opkg install hd-idle
</code>
To use 'hd-idle' to spin down the harddisk after 20 min (=1200seconds) of idle timeout:
<code>
hd-idle -i 1200
</code>
Avoid to start it more than once, as the program does not seem to be able to detect that its already running, otherwise you will be wasting RAM. If needed, check with ''ps | grep hd-idle'' if its already running.
If 'hd-idle' works for you (and if hdparm won't), add it to a startup script of your LEDE, otherwise you will have to start it manually again everytime you reboot your LEDE device.

====== Not sure this is required any longer ======

This optional verification step can be used, to check that required USB drivers are properly installed.

  - To check, if USB drivers are working correctly, install the optional **usbutils** package:<code>opkg update
opkg install usbutils</code>
  - Now connect your USB disk/stick and list your connected devices: <code>lsusb -t</code>
  - This will output a list of connected external storage devices:<code>
/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci-mtk/1p, 5000M
/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci-mtk/2p, 480M
    |__ Port 1: Dev 5, If 0, Class=Mass Storage, Driver=usb-storage, 480M
</code>
  * "Bus..."-Lines represent the host chip. Here, the "Driver" will be xhci" for USB3.0, "ehci" for USB2.0 and "uhci" or "ohci" for USB1.1.
  * Lines with "Class=Mass Storage" represent connected USB devices. Here the "Driver" is either "usb-storage" for storage of type [[https://en.wikipedia.org/wiki/USB_mass_storage_device_class|Bulk only Transport]] or "usb-storage-uas" for storage of type [[https://en.wikipedia.org/wiki/USB_Attached_SCSI|USB_Attached_SCSI]] 

In step 3, verify that the output prints no error and has at least one output line for **root_hub** and **Mass Storage** and that each **Driver=** lists a driver name. If not, then you need [[docs:user-guide:installstoragedrivers|to install USB drivers on your LEDE device first]].

