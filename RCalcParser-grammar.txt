The Grammar: 
    <expr> ::= <sequence-expr>
    <sequence-expr> ::= <sequence-part> (, <sequence-part>)*
    <assignment-expr> ::= (id := <conditional-expr) || <conditional-expr>)
    <conditional-expr> ::= <logical-or-expr> (? <expr> : <expr>){1}
    <logical-or-expr>  ::= <logical-and-expr> (|| <logical-and-expr>)*
    <logical-and-expr> ::= <equality-expr> (&& <equality-expr>)* 
    <equality-expr> ::= <relational-expr> ([=,==,!=,<>] <relational-expr>)*
    <relational-expr> ::= <additive-expr> ([<,>,<=,>=] <additive-expr>)*
    <additive-expr>	::=  [+-]? <term> ([+-] <term>)* 
    <term>	::= <factor> ([/ *] <factor>)*
    <string-match> ::= <factor> ([=~ !~] <factor>){1}
    <factor> ::= [!]? [-+]? ( <number> | <string> | <identifier> | <identifier> "(" <paramlist> ")" | "(" <expr> ")" )

Operators - recognized by ScanToken():
 	{ < > <= >= }       --> kRelationalOp
 	{ [=] == != <> } 	--> kEqualityOp
 	{ ! }               --> kLogicalNot
 	{ && }              --> kLogicalAnd
 	{ || }              --> kLogicalOr
 	{ =~ !~ }           --> kStringMatchOp
 	{ : }               --> kConditionalElse
 	{ := [=] }			--> kAssignmentOp

Tokens (from AdvanceToken()): 
    kNumber: ([0-9]*, 0x... 0X...
    kIdentifier: [_a-zA-Z]* with possible $ or ${...}
    Reserved Words: and or not
    kEndOfLine: \0
    kAdditionOp: + -
    kMultiplyOp: * / %
    kLeftParen: (
    kRightParen: )
    kComma: ,
    kSemicolon: ;
    Assorted operators: returned from ScanToken()
    kConditionalIfThen: ?
